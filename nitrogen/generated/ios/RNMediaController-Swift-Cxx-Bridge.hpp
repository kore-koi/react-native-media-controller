///
/// RNMediaController-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridMPVolumeViewControllerSpec` to properly resolve imports.
namespace margelo::nitro::mediacontroller { class HybridMPVolumeViewControllerSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridMPVolumeViewControllerSpecCxx` to properly resolve imports.
namespace RNMediaController { class HybridMPVolumeViewControllerSpecCxx; }

// Include C++ defined types
#include "HybridMPVolumeViewControllerSpec.hpp"
#include <NitroModules/PromiseHolder.hpp>
#include <functional>
#include <future>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::mediacontroller::bridge::swift {

  // pragma MARK: PromiseHolder<void>
  /**
   * Specialized version of `PromiseHolder<void>`.
   */
  using PromiseHolder_void_ = PromiseHolder<void>;
  inline PromiseHolder<void> create_PromiseHolder_void_() {
    return PromiseHolder<void>();
  }
  
  // pragma MARK: PromiseHolder<double>
  /**
   * Specialized version of `PromiseHolder<double>`.
   */
  using PromiseHolder_double_ = PromiseHolder<double>;
  inline PromiseHolder<double> create_PromiseHolder_double_() {
    return PromiseHolder<double>();
  }
  
  // pragma MARK: std::function<void(double /* o */)>
  /**
   * Specialized version of `std::function<void(double)>`.
   */
  using Func_void_double = std::function<void(double /* o */)>;
  /**
   * Wrapper class for a `std::function<void(double / * o * /)>`, this can be used from Swift.
   */
  class Func_void_double_Wrapper final {
  public:
    explicit Func_void_double_Wrapper(const std::function<void(double /* o */)>& func): _function(func) {}
    explicit Func_void_double_Wrapper(std::function<void(double /* o */)>&& func): _function(std::move(func)) {}
    inline void call(double o) const {
      _function(o);
    }
  private:
    std::function<void(double /* o */)> _function;
  };
  inline Func_void_double create_Func_void_double(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, double), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_double([sharedClosureHolder, call](double o) -> void {
      call(sharedClosureHolder.get(), o);
    });
  }
  inline std::shared_ptr<Func_void_double_Wrapper> share_Func_void_double(const Func_void_double& value) {
    return std::make_shared<Func_void_double_Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::mediacontroller::HybridMPVolumeViewControllerSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::mediacontroller::HybridMPVolumeViewControllerSpec>`.
   */
  using std__shared_ptr_margelo__nitro__mediacontroller__HybridMPVolumeViewControllerSpec_ = std::shared_ptr<margelo::nitro::mediacontroller::HybridMPVolumeViewControllerSpec>;
  std::shared_ptr<margelo::nitro::mediacontroller::HybridMPVolumeViewControllerSpec> create_std__shared_ptr_margelo__nitro__mediacontroller__HybridMPVolumeViewControllerSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__mediacontroller__HybridMPVolumeViewControllerSpec_(std__shared_ptr_margelo__nitro__mediacontroller__HybridMPVolumeViewControllerSpec_ cppType);

} // namespace margelo::nitro::mediacontroller::bridge::swift
